apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"name":"flink-taskmanager-ha","namespace":"flink"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"flink","component":"taskmanager-ha"}},"serviceName":"taskmanager-ha","template":{"metadata":{"labels":{"app":"flink","component":"taskmanager-ha"}},"spec":{"containers":[{"args":["taskmanager"],"image":"europe-west2-docker.pkg.dev/academy-350111/flink/flink-kafka-python:v2","imagePullPolicy":"Always","livenessProbe":{"initialDelaySeconds":30,"periodSeconds":60,"tcpSocket":{"port":6122}},"name":"taskmanager-ha","ports":[{"containerPort":6122,"name":"rpc"},{"containerPort":6125,"name":"query-state"}],"resources":{"limits":{"cpu":"2","ephemeral-storage":"4Gi","memory":"4Gi"},"requests":{"cpu":"1","ephemeral-storage":"4Gi","memory":"2Gi"}},"securityContext":{"runAsUser":9999},"volumeMounts":[{"mountPath":"/opt/flink/conf/","name":"flink-config-volume"},{"mountPath":"/opt/flink/rocksdb-state/","name":"rocksdb-state"}]}],"imagePullSecrets":[{"name":"gcr-json-key"}],"initContainers":[{"command":["sh","-c","chown -R 9999:9999 /opt/flink/rocksdb-state/"],"image":"busybox","name":"volume-mount-hack","volumeMounts":[{"mountPath":"/opt/flink/rocksdb-state/","name":"rocksdb-state"}]}],"serviceAccountName":"flink-ha","topologySpreadConstraints":[{"labelSelector":{"matchLabels":{"app":"flink","component":"taskmanager-ha"}},"maxSkew":1,"topologyKey":"kubernetes.io/hostname","whenUnsatisfiable":"ScheduleAnyway"}],"volumes":[{"configMap":{"items":[{"key":"flink-conf.yaml","path":"flink-conf.yaml"},{"key":"log4j-console.properties","path":"log4j-console.properties"}],"name":"flink-config-ha"},"name":"flink-config-volume"}]}},"volumeClaimTemplates":[{"metadata":{"name":"rocksdb-state"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"20Gi"}}}}]}}
  creationTimestamp: "2024-01-30T10:27:40Z"
  generation: 5
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kubectl.kubernetes.io/last-applied-configuration: {}
      f:spec:
        f:persistentVolumeClaimRetentionPolicy:
          .: {}
          f:whenDeleted: {}
          f:whenScaled: {}
        f:podManagementPolicy: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:serviceName: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app: {}
              f:component: {}
          f:spec:
            f:containers:
              k:{"name":"taskmanager-ha"}:
                .: {}
                f:args: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:livenessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:tcpSocket:
                    .: {}
                    f:port: {}
                  f:timeoutSeconds: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":6122,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":6125,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:ephemeral-storage: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:ephemeral-storage: {}
                    f:memory: {}
                f:securityContext:
                  .: {}
                  f:runAsUser: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/opt/flink/conf/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/opt/flink/rocksdb-state/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:dnsPolicy: {}
            f:imagePullSecrets:
              .: {}
              k:{"name":"gcr-json-key"}: {}
            f:initContainers:
              .: {}
              k:{"name":"volume-mount-hack"}:
                .: {}
                f:command: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/opt/flink/rocksdb-state/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
            f:topologySpreadConstraints:
              .: {}
              k:{"topologyKey":"kubernetes.io/hostname","whenUnsatisfiable":"ScheduleAnyway"}:
                .: {}
                f:labelSelector: {}
                f:maxSkew: {}
                f:topologyKey: {}
                f:whenUnsatisfiable: {}
            f:volumes:
              .: {}
              k:{"name":"flink-config-volume"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:items: {}
                  f:name: {}
                f:name: {}
        f:updateStrategy:
          f:rollingUpdate:
            .: {}
            f:partition: {}
          f:type: {}
        f:volumeClaimTemplates: {}
    manager: kubectl-client-side-apply
    operation: Update
    time: "2024-01-30T10:53:21Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:availableReplicas: {}
        f:collisionCount: {}
        f:currentReplicas: {}
        f:currentRevision: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updateRevision: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    subresource: status
    time: "2024-02-01T12:00:16Z"
  name: flink-taskmanager-ha
  namespace: flink
  resourceVersion: "2329190"
  uid: da563e60-37c6-409f-ad31-2284e92704eb
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: flink
      component: taskmanager-ha
  serviceName: taskmanager-ha
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: flink
        component: taskmanager-ha
    spec:
      containers:
      - args:
        - taskmanager
        image: europe-west2-docker.pkg.dev/academy-350111/flink/flink-kafka-python:v2
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          tcpSocket:
            port: 6122
          timeoutSeconds: 1
        name: taskmanager-ha
        ports:
        - containerPort: 6122
          name: rpc
          protocol: TCP
        - containerPort: 6125
          name: query-state
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            ephemeral-storage: 4Gi
            memory: 4Gi
          requests:
            cpu: "1"
            ephemeral-storage: 4Gi
            memory: 2Gi
        securityContext:
          runAsUser: 9999
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/flink/conf/
          name: flink-config-volume
        - mountPath: /opt/flink/rocksdb-state/
          name: rocksdb-state
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: gcr-json-key
      initContainers:
      - command:
        - sh
        - -c
        - chown -R 9999:9999 /opt/flink/rocksdb-state/
        image: busybox
        imagePullPolicy: Always
        name: volume-mount-hack
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/flink/rocksdb-state/
          name: rocksdb-state
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: flink-ha
      serviceAccountName: flink-ha
      terminationGracePeriodSeconds: 30
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app: flink
            component: taskmanager-ha
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: flink-conf.yaml
            path: flink-conf.yaml
          - key: log4j-console.properties
            path: log4j-console.properties
          name: flink-config-ha
        name: flink-config-volume
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: rocksdb-state
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      volumeMode: Filesystem
    status:
      phase: Pending
